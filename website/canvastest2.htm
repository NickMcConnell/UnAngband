<html>
  <head>
    <title>Canvas Grid</title>
    <meta name="DC.creator" content="Andrew Doull, http://roguelikedeveloper.blogspot.com/">
    <script type="text/javascript">
    
    	// A shape is an 'abstract' shape.
    	// Default to a white circle.
    	function Shape()
    	{
    		this.star = false;
    		this.lined = false;
    		this.points = 0;
    		this.filled = false;
    		this.rotation = 0;
    		this.inverse = false;
    		this.color = "rgb(255,255,255)";
    	}
    
    	// A 'polyhedronoid' as a regular polygon, or a polystar. If sides < 3, it is instead a circle.
    	function Polyhedronoid()
    	{
			this.y = 0;
			this.x = 0;
			this.star = false;
			this.lined = false;
			this.points = 0;
			this.radius = 10;
			this.filled = false;
			this.rotation = 0;
			this.color = "rgb(255,165,0)";
    	}
    
		Polyhedronoid.prototype.Draw = function(ctx)
		{
			// Draw the polyhedron
		 	if (this.filled)
		 	{
		 		ctx.fillStyle = this.color;
		 	}

			// Set the stroke style
		 	ctx.strokeStyle = this.color;

			ctx.beginPath();
		    
		    // We degenerate to a circle if points are less than 3. Note that rotation is meaningless in this case.
		    if (this.points < 3)
		    {
		    	// Don't use a wide line
				ctx.lineWidth = 1;

		       ctx.arc(this.x, this.y, this.radius, 0, 2*Math.PI, false); // Start Radians = 0, End Radians = 2*Math.PI, Anticlockwise = False
		    }
		    else
		    {
			 	// Set the stroke width.
			 	ctx.lineWidth = 1 + this.radius / 4;
		 	
				// Move to first point position
			    ctx.moveTo(this.x + this.radius * Math.sin(this.rotation),this.y + this.radius * Math.cos(this.rotation))
			    
			    // Choose equal points on the circle. Basic trig.
			    for (i = 1; i <= this.points; i++)
			  	{
			  		// Draw a plus or partial star
			  		if (this.lined)
			  		{
			  			ctx.moveTo(this.x, this.y);
			  		}
			  	
			    	// Draw a star instead of a polyhedron.
			        if (this.star)
			        {
						ctx.lineTo(this.x + this.radius * Math.sin(( (i - 0.5) * 2 * Math.PI / this.points) + this.rotation),
							this.y + this.radius * Math.cos(( (i - 0.5) * 2 * Math.PI / this.points) + this.rotation));
					}

					ctx.lineTo(this.x + this.radius * Math.sin((i * 2 * Math.PI / this.points) + this.rotation),
							this.y + this.radius * Math.cos((i * 2 * Math.PI / this.points) + this.rotation));
				}

			    //Close path
			    ctx.closePath();
		    }

			// Draw the polyhedron
		 	if (this.filled)
		 	{
		 		ctx.fill();
		 	}

			// Always stroke it
		 	ctx.stroke();
		}


/* The rules define what each state looks like, and how to transition from one state to the next */
		function Rules(maxStates)
		{
			this.maxStates = maxStates;
			this.shapes = new Array(maxStates);
			for (i = 0; i < maxStates; i++)
			{
				this.shapes = new Shape();
			}
		}

		Rules.prototype.Transition = function(x, y, transition, grid)
		{
			// To be overridden by the particular rule set.
			
			return (grid.cells[x][y]);
		}
		
		Rules.prototype.Shape = function(state)
		{
			if (state < this.maxStates)
			{
				return (this.shapes);
			}
			else
			{
				return (new Shape());
			}
		}
		
		Rules.prototype.SetShape = function(state, shape)
		{
			if (state < this.maxStates)
			{
				this.shapes[state] = shape;
			}
		}
		
		Rules.prototype.Generator = function(x, y, grid)
		{
			return (Math.floor(Math.random() * this.maxStates));
		}

		// A grid is a collection of cells.
		function Grid(top, left, height, width, rows, cols, rules)
		{
			this.top = top;
			this.left = left;
			this.height = height;
			this.width = width;
			this.rows = rows;
			this.cols = cols;
			this.rules = rules;
			this.background = "rgb(0,0,0);";
			this.cells = new Array(cols);
			this.refresh = new Array(cols);
			this.damaged = new Array(cols);
			for(x = 0; x < cols; x++)
			{
				this.cells[x] = new Array(rows);
				this.refresh[x] = new Array(rows);
				this.damaged[x] = new Array(rows);
				for(y = 0; y < rows; y++)
				{
					this.cells[x][y] = rules.Generator(x, y, this);
					this.refresh[x][y] = true;
					this.damaged[x][y] = true;
				}
			}			
		}
		
		Grid.prototype.Fresh = function()
		{
			for(x = 0; x < cols; x++)
			{
				for(y = 0; y < rows; y++)
				{
					this.refresh[x][y] = true;
				}
			}		
		}

		Grid.prototype.Draw = function(ctx)
		{
			saved = false;
			
			// Erase the cell backgrounds first.
			for(x = 0; x < cols; x++)
			{
				for(y = 0; y < rows; y++)
				{
					// Draw the background if display 'damaged' or needs refreshing
					if ((this.damaged[x][y]) || (this.refresh[x][y]))
					{
						if (!saved)
						{
							ctx.save();
							saved = true;
						}
						ctx.fillStyle = this.background;
						ctx.fillRect(this.top + (y * this.height),
							this.left + (x * this.width),
							this.top + ((y + 1) * this.height),
							this.left + ((x + 1) * this.width));
					}
					
					// State 0 is always 'blank'	
					if (this.cells[x][y] == 0) this.damaged[x][y] = false;
				}
			}

			// Restore state if required
			if (saved) ctx.restore();
			
			// Draw the cells
			for(x = 0; x < cols; x++)
			{
				for(y = 0; y < rows; y++)
				{
					if (!(this.refresh[x][y])) continue;
					
					// State 0 is always 'blank'	
					if (this.cells[x][y] == 0) continue;
					
					// Use least of height and width
					if (this.height < this.width)
					{
						r = this.height / 2;
					}
					else
					{
						r = this.width / 2;
					}
					
					h = this.top + (y * this.height) + r;
					w = this.left + (x * this.width) + r;
					
					p = new Polyhedronoid();
					p.radius = r;
					p.x = w;
					p.y = h;
					
					i = this.cells[x][y];
					
					// Get shape details
					p.star = this.rules.shapes[i].star;
					p.points = this.rules.shapes[i].points;
					p.lined = this.rules.shapes[i].lined;
					p.filled = this.rules.shapes[i].filled;
					p.rotation = this.rules.shapes[i].rotation;
					p.color = this.rules.shapes[i].color;

					if (this.rules.shapes[this.cells[x][y]].inverse)
					{
						p.color = "rgb(0,0,0)";
					}
					
					p.Draw(ctx);
					this.damaged[x][y] = true;
				}
			}
		}
		
		Grid.prototype.Tick = function(transition)
		{
			newGrid = new Grid(this.top, this.left, this.height, this.width, this.rows, this.cols, this.rules);
			
			for(x = 0; x < cols; x++)
			{
				for(y = 0; y < rows; y++)
				{
					newGrid.cells[x][y] = this.rules.Transition(x, y, transition, this);
					
					if (newGrid.cells[x][y] == this.cells[x][y]) newGrid.refresh[x][y] = false;
				}
			}
			
			return (newGrid);
		}

		// Implementation of the Game of Life
		function GameofLife()
		{
			this.parent = Rules;
			this.parent(2);
		}
		
		GameofLife.prototype = new Rules(2);
		
		GameofLife.prototype.Transition = function(x, y, transition, grid)
		{
			// Count of cell neighbours.
			neighbours = 0;
		
			// Count neighbours of x, y
			for (x1 = x - 1; x1 <= x + 1; x1++)
			{
				for (y1 = y - 1; y1 <= y + 1; y1++)
				{
					// Skip self.
					if ((y1 == y) && (x1 == x)) continue;
					
					// Boundaries - x
					x0 = x1;
					while (x0 < 0) { x0 = grid.cols + x0; }
					while (x0 >= grid.cols) { x0 = x0 - grid.cols; }
					
					// Boundaries - y
					y0 = y1;
					while (y0 < 0) { y0 = grid.rows + y0; }
					while (y0 >= grid.rows) { y0 = y0 - grid.rows; }
					
					// Count neighbours
					if (grid.cells[x0][y0]) neighbours++;
				}
			}
			
			// Decision
			if ((neighbours < 2) || (neighbours > 3))
			{
				return(0);
			}
			else if (neighbours == 2)
			{
				return(grid.cells[x][y]);
			}
			else
			{
				return (1);
			}
		}

//Sadly these appear to need to be globals.
rows = 30;
cols = 30;
height = 10;
width = 10;

//  Initialise game
game1 = new GameofLife(2);

// Initialise the shapes - a white circle, and a red circle.
shape1 = new Shape();
shape2 = new Shape();
shape2.color = "rgb(255,0,0);";

// Set rules to use shape.
game1.SetShape(0, shape1);
game1.SetShape(1, shape2);

// Initialise Grid
grid1 = new Grid(0, 0, height, width, rows, cols, game1);

// Delay in milliseconds
delay = 80;

// Guard to avoid multiple updates for e.g. garbage collection
ticked = true;

// Allow pausing
pause = false;


  function drawGrid(update){
    // get the canvas element using the DOM
    var canvas = document.getElementById('grid-canvas');

    // Make sure we don't execute when canvas isn't supported
    if (canvas.getContext){

		/* Delay until next update */
		setTimeout("drawGrid(true);",delay);
		
		if (!ticked || pause) return;
		ticked = false;
		
    	// use getContext to use the canvas for drawing
   		var ctx = canvas.getContext('2d');

		// Resize grid to fit canvas
		grid1.height = canvas.height / rows;
		grid1.width = canvas.width / cols;

		/* Draw grid */
		grid1.Draw(ctx);
		
		// Update grid one turn if required
		if (update)
		{
			grid1 = grid1.Tick(1);
		}
		
		ticked = true;

    } else {
      alert('You need Safari or Firefox 1.5+ to see this demo.');
    }
    
  }
    </script>
    <style type="text/css">
      body { margin: 20px; font-family: arial,verdana,helvetica; background: #fff;}
      h1 { font-size: 140%; font-weight:normal; color: #036; border-bottom: 1px solid #ccc; }
      canvas { border: 2px solid #000; float: left; margin-right: 20px; margin-bottom: 20px; }
      pre { float:left; display:block; background: rgb(238,238,238); border: 1px dashed #666; padding: 15px 20px; margin: 0 0 10px 0; }
    </style>
  </head>

  <body onload="drawGrid(false);">
    <h1>Testing</h1>
    <div>
      <canvas id="grid-canvas" width="300" height="300"></canvas>
    <FORM NAME="grid-form" ACTION="" METHOD="GET">
<INPUT TYPE="button" NAME="restart" Value="Restart" onClick="grid1 = new Grid(0, 0, height, width, rows, cols, game1); pause = false;">
<INPUT TYPE="button" NAME="pause" Value="Pause" onClick="pause = !pause;">
<INPUT TYPE="button" NAME="faster" Value="Faster" onClick="if(delay > 1) delay = delay / 2;">
<INPUT TYPE="button" NAME="slower" Value="Slower" onClick="delay = delay * 2;">
</FORM>
    
<pre>

This is just a test. Please ignore.

</pre>
    </div>
  </body>

</html>
